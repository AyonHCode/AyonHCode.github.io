* {
    box-sizing: border-box;
}

body {
    margin: 0px;
    font-family: sans-serif;
}

#navbar {
    background-color: #A67C52;
    display: flex;
    align-items: center;
}

#navbar a {
    display: inline-block;
    text-decoration: none;
    color: white;
    padding: 24px;
}

#navbar a:hover {
    background: linear-gradient(to top, #109cb8, #0e5b96);
}

#navbar #logo img {
    margin-right: auto;
    width: 150px;
    padding-top: 5px;
    padding-bottom: 5px;
}

/*
    Dropdown styling ********************************************
*/
.dropdown-container {
    position: relative;
}

.dropdown-menu {
    position: absolute;
    opacity: 0;
    visibility: hidden;
    transition: 
        opacity 0.25s,
        visibility 0.25s;

    /*
        If your dropdown menu seems to be placed
        behind content on your page, you may need
        to include a z-index, which pull it 
        closer to you as a viewer.
    */
    z-index: 10;
}

/*
    This selector targets dropdown-containers
    that are the last child of their parent,
    and looks inside of them for a dropdown-menu.

    If found, we target it and anchor it
    to the right of its parent container
*/
.dropdown-container:last-child .dropdown-menu {
    right: 0px;
}

/*
    This is the selector responsible for
    revealing the dropdown menu.

    Note that the :hover pseudo-class is 
    attached to the CONTAINER, not the MENU.

    We can't hover over the menu when it's
    hidden; we only want it to display when
    the trigger link in the container is 
    hovered over.
*/
.dropdown-container:hover .dropdown-menu {
    opacity: 1;
    visibility: visible;
}

.dropdown-menu a {
    background-color: darkslateblue;
    width: 100%;
    min-width: 200px;
}

/*
    We need to be a bit more specific with
    our selectors in order to override the
    anchor hover state we declared earlier.

    To do so, we need to include both
    #navbar and .dropdown-menu.

    Also note, using background-color
    won't work, because in our original
    anchor hover, we used the background
    property to set a linear-gradient().

    So, to override it, we need to use
    the same shorthand background property.
*/
#navbar .dropdown-menu a:hover {
    background: slateblue;
}

 /* the hero content */
#hero-1 {
    background-image: url("../images/food-photgraphy-tips.webp");
    height: 100vh;
    background-size: cover;
    background-position: center center;
    display: flex;
    justify-content: flex-start;
    align-items: center;
}

#hero-1 h1 {
    font-size: 15vw;
    padding-left: 10vw;
}

.spacer {
    height: 00vh;
}

.single-column {
    min-width: 600px;
    max-width: 1200px;
    margin: 0px auto;
}

#main-section {
    background-color:#A67C52; 
        
    padding: 48px;
}



/*
    Media and text side-by-side implementation **************
*/

/*
    As always, applying Flexbox to the container 
    of the elements we want side by side is 
    usually the way to go.

    Remember that for a Flexbox row, the
    align-items property can be used to 
    align content vertically, in this case,
    in the center of the container.
*/
.side-by-side {
    display: flex;
    align-items: center;
    margin: 48px 0px;
}

/*
    In this case, we have the image and text containers
    with equal sizes (flex: 1), but if you want the 
    image to be larger, or conversely if you want the 
    text area to be larger, you can adjust the flex 
    values assigned to each container.
*/
.side-by-side .image-container {
    flex: 1;
}

.side-by-side .text-container {
    flex: 1;
    padding: 36px;
}

/*
    This code tells the image to stretch
    to fill the container we set up
    above; this means that the image
    will be as flexible as the Flexbox
    item it is inside of.
*/
.side-by-side .image-container img {
    width: 100%;
}

.side-by-side .text-container h3 {
    font-size: 48px;
}

/* fake button styling */
.side-by-side .text-container a {
    font-size: 28px;
    font-weight: bold;
    text-decoration: none;
    display: inline-block;
    background-color: #A67C52;
    color: white;
    padding: 24px 48px;
    border-radius: 48px;
}