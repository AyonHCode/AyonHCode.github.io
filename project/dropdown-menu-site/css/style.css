* {
    box-sizing: border-box;
    
}

body {
    margin: 0px;
    font-family: sans-serif;
}



#navbar {
    background-color: rgb(179, 143, 99); 
    display: flex;
    align-items: center;
}

#navbar a {
    display: inline-block;
    text-decoration: none;
    color: white;
    padding: 24px;
}

#navbar a:hover {
    background-color:rgb(139, 122, 96);
}

#navbar #logo {
    margin-right: auto;
    font-weight: bold;
    font-size: 36px;
    padding-top: 13px;
    padding-bottom: 12px;
}

/*
    Dropdown styling ********************************************
*/
.dropdown-container {
    position: relative;
}

.dropdown-menu {
    position: absolute;
    opacity: 0;
    visibility: hidden;
    transition: 
        opacity 0.25s,
        visibility 0.25s;

    /*
        If your dropdown menu seems to be placed
        behind content on your page, you may need
        to include a z-index, which pull it 
        closer to you as a viewer.
    */
    z-index: 10;
}

/*
    This selector targets dropdown-containers
    that are the last child of their parent,
    and looks inside of them for a dropdown-menu.

    If found, we target it and anchor it
    to the right of its parent container
*/
.dropdown-container:last-child .dropdown-menu {
    right: 0px;
}

/*
    This is the selector responsible for
    revealing the dropdown menu.

    Note that the :hover pseudo-class is 
    attached to the CONTAINER, not the MENU.

    We can't hover over the menu when it's
    hidden; we only want it to display when
    the trigger link in the container is 
    hovered over.
*/
.dropdown-container:hover .dropdown-menu {
    opacity: 1;
    visibility: visible;
}

.dropdown-menu a {
    background-color: darkslateblue;
    width: 100%;
    min-width: 200px;
}

/*
    We need to be a bit more specific with
    our selectors in order to override the
    anchor hover state we declared earlier.

    To do so, we need to include both
    #navbar and .dropdown-menu.

    Also note, using background-color
    won't work, because in our original
    anchor hover, we used the background
    property to set a linear-gradient().

    So, to override it, we need to use
    the same shorthand background property.
*/
#navbar .dropdown-menu a:hover {
    background: slateblue;
}

/* hero content */

.spacer {
    height: 100vh;
}

#hero-4 {
    background-image: url("../images/download\ \(3\).jpeg");
    height: 100vh;
    background-size: cover;
    background-position: center right;
    display: flex;
    justify-content: center;
    align-items: center;
}

#hero-4 .hero-content {
    text-align: center;
    color: white;
    padding-top: 20vh;
}

#hero-4 h2 {
    font-size: 8vw;
    margin-bottom: 5vh;
}

#hero-4 h4 {
    font-size: 3vw;
    margin: 0px;
}

#hero-4 a {
    font-size: 1.5vw;
    display: inline-block;
    /* background-color: white; */
    color: #333333;
    text-decoration: none;
    padding: 24px;
    margin: 5vh 2vw 10vh;
}

#hero {
    height: 58vh;
    margin: 10px auto;
    display: flex;
    justify-content: center;
}

.hero-text {
    display: flex;
    justify-content: center;
   


}



@media screen and (max-width: 536px) {

    #navbar{
        flex-wrap: wrap; 
        flex-direction: column;
        align-items: center;
    }

    .intro {
        flex-direction: column;
        gap: 24px;
    }

    .content-container h1 {
        margin: 0px;
        font-size: 32px
    }

    .content-container {
        text-align: center;
    }

    .grid {
        grid-template-columns: 1fr;
        grid-template-areas: 
            "txt1"
            "img1"
            "img2"
            "img3"
            "img4"
            "txt2";
    }

    .grid p {
        height: 300px;
        display: flex;
        justify-content: right;
        align-items: center;
    }
    
    
        
   


}